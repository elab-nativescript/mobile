"use strict";
var Common = require("./gif.common");
var fs = require("file-system");
var gif_common_1 = require("./gif.common");
var style_properties_1 = require("ui/styling/style-properties");
global.moduleMerge(Common, exports);
var Gif = (function (_super) {
    __extends(Gif, _super);
    function Gif() {
        var _this = _super.call(this) || this;
        _this.nativeView = FLAnimatedImageView.alloc().initWithFrame(CGRectMake(0, 0, 100, 100));
        _this.nativeView.clipsToBounds = true;
        return _this;
    }
    Gif.prototype[gif_common_1.srcProperty.setNative] = function (value) {
        if (value) {
            var isUrl = false;
            if (value.indexOf("://") !== -1) {
                if (value.indexOf('res://') === -1) {
                    isUrl = true;
                }
            }
            if (!isUrl) {
                var currentPath = fs.knownFolders.currentApp().path;
                if (value[1] === '/' && (value[0] === '.' || value[0] === '~')) {
                    value = value.substr(2);
                }
                if (value[0] !== '/') {
                    value = currentPath + '/' + value;
                }
                this._animatedImage = FLAnimatedImage.animatedImageWithGIFData(NSData.dataWithContentsOfFile(NSString.stringWithString(value)));
            }
            else {
                this._animatedImage = FLAnimatedImage.animatedImageWithGIFData(NSData.dataWithContentsOfURL(NSURL.URLWithString(value)));
            }
            try {
                this.nativeView.animatedImage = this._animatedImage;
                this.nativeView.frame = CGRectMake(0, 0, 100, 100);
            }
            catch (ex) {
                console.log(ex);
            }
            if (isNaN(style_properties_1.PercentLength.toDevicePixels(this.width)) || isNaN(style_properties_1.PercentLength.toDevicePixels(this.height))) {
                this.requestLayout();
            }
        }
        else {
            console.log("No src value detected.");
        }
    };
    Gif.prototype.stop = function () {
        this.nativeView.stopAnimating();
    };
    Gif.prototype.start = function () {
        this.nativeView.startAnimating();
    };
    Gif.prototype.isPlaying = function () {
        var isPlaying = this.nativeView.animatedImage.isAnimating();
        return isPlaying;
    };
    Gif.prototype.getFrameCount = function () {
        var frames = this.nativeView.animatedImage.frameCount;
        return frames;
    };
    return Gif;
}(Common.Gif));
exports.Gif = Gif;
