"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var page_1 = require("ui/page");
var nativescript_loading_indicator_1 = require("nativescript-loading-indicator");
var angular_1 = require("nativescript-telerik-ui/sidedrawer/angular");
var elementRegistryModule = require("nativescript-angular/element-registry");
var colorModule = require("tns-core-modules/color");
var restcountries_1 = require("../../shared/restcountries/restcountries");
elementRegistryModule.registerElement("CardView", function () { return require("nativescript-cardview").CardView; });
elementRegistryModule.registerElement("Carousel", function () { return require("nativescript-carousel").Carousel; });
elementRegistryModule.registerElement("CarouselItem", function () { return require("nativescript-carousel").CarouselItem; });
var outh_1 = require("../../shared/outh/outh");
var loader = new nativescript_loading_indicator_1.LoadingIndicator();
var Color = colorModule.Color;
var Country = (function () {
    function Country(name, currency, currency_symbol, currencyRate) {
        this.name = name;
        this.currency = currency;
        this.currency_symbol = currency_symbol;
        this.currencyRate = currencyRate;
    }
    return Country;
}());
var Countries = ["AED", "AFN", "ALL", "AMD", "ANG", "AOA", "ARS", "AUD", "AWG", "AZN", "BAM", "BBD", "BDT", "BGN", "BHD", "BIF",
    "BMD", "BND", "BOB", "BRL", "BSD", "BTC", "BTN", "BWP", "BYN", "BYR", "BZD", "CAD", "CDF", "CHF", "CLF", "CLP", "CNY", "COP", "CRC", "CUC",
    "CUP", "CVE", "CZK", "DJF", "DKK", "DOP", "DZD", "EEK", "EGP", "ERN", "ETB", "EUR", "FJD", "FKP", "GBP", "GEL", "GGP", "GHS", "GIP", "GMD",
    "GNF", "GTQ", "GYD", "HKD", "HNL", "HRK", "HTG", "HUF", "IDR", "ILS", "IMP", "INR", "IQD", "IRR", "ISK", "JEP", "JMD", "JOD", "JPY", "KES",
    "KGS", "KHR", "KMF", "KPW", "KRW", "KWD", "KYD", "KZT", "LAK", "LBP", "LKR", "LRD", "LSL", "LTL", "LVL", "LYD", "MAD", "MDL", "MGA", "MKD",
    "MMK", "MNT", "MOP", "MRO", "MUR", "MVR", "MWK", "MXN", "MYR", "MZN", "NAD", "NGN", "NIO", "NOK", "NPR", "NZD", "OMR", "PAB", "PEN", "PGK",
    "PHP", "PKR", "PLN", "PYG", "QAR", "RON", "RSD", "RUB", "RWF", "SAR", "SBD", "SCR", "SDG", "SEK", "SGD", "SHP", "SLL", "SOS", "SRD", "STD",
    "SVC", "SYP", "SZL", "THB", "TJS", "TMT", "TND", "TOP", "TRY", "TTD", "TWD", "TZS", "UAH", "UGX", "UYU", "UZS", "VEF", "VND", "VUV",
    "WST", "XAF", "XCD", "XDR", "XOF", "XPF", "YER", "ZAR", "ZMK", "ZMW", "ZWL"];
var landingComponents = (function () {
    function landingComponents(page, OuthService, restCountries) {
        var _this = this;
        this.page = page;
        this.OuthService = OuthService;
        this.restCountries = restCountries;
        this.countries = [];
        var _loop_1 = function (i) {
            this_1.restCountries.getBycurreny(Countries[i]).subscribe(function (res) {
                for (var _i = 0, res_1 = res; _i < res_1.length; _i++) {
                    var country = res_1[_i];
                    var currencie_symbol = void 0;
                    for (var _a = 0, _b = country.currencies; _a < _b.length; _a++) {
                        var currencie = _b[_a];
                        currencie_symbol = currencie.symbol;
                    }
                    _this.countries.push(new Country(country.name, Countries[i], currencie_symbol, ""));
                }
            });
        };
        var this_1 = this;
        for (var i = 0; i < Countries.length; i++) {
            _loop_1(i);
        }
        this.restCountries.getCurrencyRate().subscribe(function (res) {
            var _loop_2 = function (exchange) {
                var ex = exchange.split("USD");
                var same = _this.countries.filter(function (Country) { return Country.currency === ex[1]; });
                if (same) {
                    for (var i = 0; i < same.length; i++)
                        same[i].currencyRate = res.quotes[exchange];
                }
            };
            for (var exchange in res.quotes) {
                _loop_2(exchange);
            }
        });
    }
    landingComponents.prototype.onItemTap = function (args) {
        console.log("Item Tapped at cell index: " + args.index);
    };
    landingComponents.prototype.ngOnInit = function () {
        this.page.actionBarHidden = true;
        var user_profile = localStorage.getItem('user_profile');
        var user_name = user_profile['name'];
        var user_profile_pic = user_profile['picture'];
        var profile_img = this.page.getViewById('profile_pic');
        profile_img.stretch = "aspectFill";
        profile_img.src = "data:image/png;base64," + user_profile_pic;
        this.email = user_profile['email'];
        this.username = user_profile['username'];
    };
    landingComponents.prototype.onMenuTapped = function (value) {
        console.log(value);
        this.drawer.closeDrawer();
    };
    return landingComponents;
}());
__decorate([
    core_1.ViewChild(angular_1.RadSideDrawerComponent),
    __metadata("design:type", angular_1.RadSideDrawerComponent)
], landingComponents.prototype, "drawerComponent", void 0);
landingComponents = __decorate([
    core_1.Component({
        selector: 'landing',
        templateUrl: './pages/landing/landing.components.html',
        styleUrls: ['pages/landing/landing.components.css'],
        providers: [outh_1.OuthService, restcountries_1.restcountries]
    }),
    __metadata("design:paramtypes", [page_1.Page, outh_1.OuthService, restcountries_1.restcountries])
], landingComponents);
exports.landingComponents = landingComponents;
//# sourceMappingURL=data:application/json;base64,