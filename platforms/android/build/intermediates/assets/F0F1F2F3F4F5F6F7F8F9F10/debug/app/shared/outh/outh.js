"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var Rx_1 = require("rxjs/Rx");
require("rxjs/add/operator/do");
require("rxjs/add/operator/map");
var Toast = require("nativescript-toast");
var config_1 = require("../config");
var connectionType = require("../../utils/connection");
var router_1 = require("nativescript-angular/router");
var nativescript_loading_indicator_1 = require("nativescript-loading-indicator");
var loader = new nativescript_loading_indicator_1.LoadingIndicator();
require("nativescript-localstorage");
var OuthService = (function () {
    function OuthService(http, router) {
        this.http = http;
        this.router = router;
    }
    OuthService.prototype.loadUser = function (uuid, access_token) {
        loader.show({ message: "please wait..." });
        var headers = new http_1.Headers();
        headers.append("orgname", config_1.Config.orgname);
        headers.append("appname", config_1.Config.appname);
        headers.append("token", access_token);
        var apiUrl = config_1.Config.apiUrl + "/find/users/" + uuid;
        return this.http.get(apiUrl, { headers: headers }).map(function (res) {
            loader.hide();
            if (res.json().successfulTransaction === false) {
                console.log("error find user =" + JSON.stringify(res.json()));
                return res.json();
            }
            return res.json();
        });
    };
    OuthService.prototype.signup = function (user, loader, loaderOptions) {
        var _this = this;
        loader.show(loaderOptions);
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        headers.append("orgname", config_1.Config.orgname);
        headers.append("appname", config_1.Config.appname);
        headers.append("clientid", config_1.Config.clientid);
        headers.append("clientsecret", config_1.Config.clientsecret);
        return this.http.post(config_1.Config.apiUrl + "/createuser", JSON.stringify({
            username: user.fullname,
            name: user.fullname,
            email: user.email,
            mobile: user.mobile,
            password: user.password,
            picture: user.profile_pic,
            usertype: "enduser"
        }), { headers: headers }).map(function (response) {
            loader.hide();
            response.json();
            if (response.json().successfulTransaction == false) {
                if (response.json().result.error_description) {
                    _this.showToast(response.json().result.error_description);
                }
                else {
                    _this.showToast(response.json().result);
                }
            }
            else {
                localStorage.setItem("email", user.email);
                localStorage.setItem("password", user.password);
                localStorage.setItem("user_uuid", response.json().data);
            }
            return response.json();
        }).do(function (response) {
            console.log("RESULT: ", JSON.stringify(response));
        }).catch(this.handleErrors);
    };
    OuthService.prototype.BGvarification = function (vcode) {
        var user_uuid = localStorage.getItem('user_uuid');
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        headers.append("orgname", config_1.Config.orgname);
        headers.append("appname", config_1.Config.appname);
        headers.append("clientid", config_1.Config.clientid);
        headers.append("clientsecret", config_1.Config.clientsecret);
        return this.http.post(config_1.Config.apiUrl + "/varify", JSON.stringify({
            uuid: user_uuid,
            vcode: vcode
        }), { headers: headers }).map(function (response) {
            response.json();
            if (response.json().successfulTransaction == false) {
            }
            return response.json();
        }).do(function (data) { console.log(data); }).catch(this.handleErrors);
    };
    OuthService.prototype.varification = function (vcode, loader, loaderOptions) {
        var _this = this;
        loader.show(loaderOptions);
        var user_uuid = localStorage.getItem('user_uuid');
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        headers.append("orgname", config_1.Config.orgname);
        headers.append("appname", config_1.Config.appname);
        headers.append("clientid", config_1.Config.clientid);
        headers.append("clientsecret", config_1.Config.clientsecret);
        return this.http.post(config_1.Config.apiUrl + "/varify", JSON.stringify({
            uuid: user_uuid,
            vcode: vcode
        }), { headers: headers }).map(function (response) {
            loader.hide();
            response.json();
            if (response.json().successfulTransaction == false) {
                if (response.json().result.error_description) {
                    _this.showToast(response.json().result.error_description);
                }
                else {
                    _this.showToast(response.json().result);
                }
            }
            return response.json();
        }).do(function (data) { console.log(data); }).catch(this.handleErrors);
    };
    OuthService.prototype.sendVcode = function (loader, loaderOptions) {
        var _this = this;
        loader.show(loaderOptions);
        var user_uuid = localStorage.getItem('user_uuid');
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        headers.append("orgname", config_1.Config.orgname);
        headers.append("appname", config_1.Config.appname);
        headers.append("clientid", config_1.Config.clientid);
        headers.append("clientsecret", config_1.Config.clientsecret);
        return this.http.post(config_1.Config.apiUrl + "/sendvarification", JSON.stringify({
            uuid: user_uuid
        }), { headers: headers }).map(function (response) {
            loader.hide();
            response.json();
            if (response.json().successfulTransaction == false) {
                if (response.json().result.error_description) {
                    _this.showToast(response.json().result.error_description);
                }
                else {
                    _this.showToast(response.json().result);
                }
            }
        }).do(function (data) { }).catch(this.handleErrors);
    };
    OuthService.prototype.login = function (user) {
        var _this = this;
        loader.show({ message: "please wait..." });
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        headers.append("orgname", config_1.Config.orgname);
        headers.append("appname", config_1.Config.appname);
        return this.http.post(config_1.Config.apiUrl + "/login", JSON.stringify({
            username: user.email,
            password: user.password,
        }), { headers: headers })
            .map(function (response) {
            if (response.json().successfulTransaction == false) {
                console.log("error " + response.json().result.error_description);
                _this.showToast(response.json().result.error_description);
                loader.hide();
                return;
            }
            console.log("login " + JSON.stringify(response.json()));
            try {
                localStorage.removeItem("email");
                localStorage.removeItem("password");
                localStorage.removeItem("user_uuid");
            }
            catch (e) {
                console.log(e);
            }
            localStorage.setItem("access_token", response.json()._client);
            localStorage.setItem("user_profile", response.json()._data);
            _this.router.navigate(["/landing"], { clearHistory: true });
        }).do(function (data) {
            loader.hide();
        })
            .catch(this.handleErrors);
    };
    OuthService.prototype.handleErrors = function (error) {
        connectionType.connectionType();
        console.log("outh error " + JSON.stringify(error.json()));
        return Rx_1.Observable.throw(error);
    };
    OuthService.prototype.showToast = function (txt) {
        var toast = Toast.makeText(txt);
        toast.show();
    };
    return OuthService;
}());
OuthService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [http_1.Http, router_1.RouterExtensions])
], OuthService);
exports.OuthService = OuthService;
//# sourceMappingURL=data:application/json;base64,